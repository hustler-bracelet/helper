# -*- coding: utf-8 -*-
import datetime
import operator
import random
from typing import Any

from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Start, Back, Cancel, Next, ScrollingGroup, Select, Button
from aiogram_dialog.widgets.text import Format, Const, Jinja

from hustler_bracelet.bot.dialogs import states
from hustler_bracelet.client.schemas.activities import ActivitySummaryResponse
from hustler_bracelet.managers import FinanceManager

from hustler_bracelet.client import ActivityAPIClient, NichesAPIClient, ActivityTasksAPIClient
from hustler_bracelet.client.schemas import ActivityDataResponse, NicheDataResponse, ActivitySummaryResponse, ActivityTaskStatus


activity_client = ActivityAPIClient()
niche_client = NichesAPIClient()
tasks_client = ActivityTasksAPIClient()


async def on_start_activity_dialog(start_data: dict, manager: DialogManager):
    user_id = manager.event.from_user.id
    activity_id = start_data['activity_id']

    # NOTE: –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activity_summary: ActivitySummaryResponse | None = await activity_client.get_activity_user_summary(user_id, activity_id)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if not activity_summary:
        # NOTE: –ø–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é—é –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity = await activity_client.get_current_activity()
        await manager.start(states.ActivityOnboarding.MAIN, data={'activity': activity})
        return

    manager.dialog_data.update({
        'activity_summary': activity_summary,
    })


async def on_process_result(
        start_data: dict,
        result_data: dict,
        dialog_manager: DialogManager
):
    if result_data and result_data.get('show_task', True):
        await dialog_manager.start(states.ActivityTask.MAIN)
        return


async def on_current_task_click(
        callback: CallbackQuery,
        widget: Any,
        dialog_manager: DialogManager
):
    data = dialog_manager.dialog_data or dialog_manager.start_data
    activity_summary: ActivitySummaryResponse = data.get('activity_summary')

    if not activity_summary.niche.task:
        await callback.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á', show_alert=True)
        return

    result = await tasks_client.get_status_for_user(
        user_id=dialog_manager.event.from_user.id,
        task_id=activity_summary.niche.task.id
    )

    if result.already_done:
        await callback.answer('–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É', show_alert=True)
        return

    if not result.can_do_task:
        await callback.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É', show_alert=True)
        return

    await dialog_manager.start(
        states.ActivityTask.MAIN, 
        data={
            'activity_summary': dialog_manager.dialog_data['activity_summary'],
        }
    )


async def top_getter(dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.dialog_data or dialog_manager.start_data

    activity_summary: ActivitySummaryResponse = data.get('activity_summary')

    return {
        "points": activity_summary.user_leaderboard_data.points if activity_summary.user_leaderboard_data else 0,
        "current_top_position": activity_summary.user_leaderboard_data.position if activity_summary.user_leaderboard_data else 0
    }


async def activity_task_getter(dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.dialog_data or dialog_manager.start_data

    activity_summary: ActivitySummaryResponse = data.get('activity_summary')

    return {
        'task_name': activity_summary.niche.task.name if activity_summary.niche.task else '-',
        'task_emoji': '',
        'task_caption': activity_summary.niche.task.description if activity_summary.niche.task else '-',
        'task_sent_at': activity_summary.niche.task.added_on if activity_summary.niche.task else None,
        'task_deadline': activity_summary.niche.task.deadline if activity_summary.niche.task else None,
        'task_reward_points': activity_summary.niche.task.points if activity_summary.niche.task else 0,  # TODO: –£—Ç–æ—á–Ω–∏—Ç—å, —Ç–æ–ª—å–∫–æ –ª–∏ –±–∞–ª–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥–µ
        'people_completed_task_amount': 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∞–º–º–∞—Ä–∏ –±–ª—è—Ç—å 
    }


async def activity_getter(dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.dialog_data or dialog_manager.start_data

    activity_summary: ActivitySummaryResponse = data.get('activity_summary')

    return {
        "activity_name": f"{activity_summary.emoji} {activity_summary.name}",
        "activity_description": activity_summary.description,
        "activity_launched_at": activity_summary.started_on,
        "activity_deadline": activity_summary.deadline,
        "activity_fund": activity_summary.fund,
        "activity_places": activity_summary.total_places,
        "current_niche": f"{activity_summary.niche.emoji} {activity_summary.niche.name}",
        "current_points_balance": activity_summary.user_leaderboard_data.points if activity_summary.user_leaderboard_data else 0,
        "current_top_position": activity_summary.user_leaderboard_data.position if activity_summary.user_leaderboard_data else 0,
        "task_name": {activity_summary.niche.task.name if activity_summary.niche.task else '-'},
        "task_reward_points": {activity_summary.niche.task.points if activity_summary.niche.task else 0},
        "task_deadline": {activity_summary.niche.task.deadline  if activity_summary.niche.task else None},
    }


async def activity_top_getter(dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.dialog_data or dialog_manager.start_data

    activity_summary: ActivitySummaryResponse = data.get('activity_summary')

    if not activity_summary.leaderboard_data:
        return []

    activity_summary.leaderboard_data = sorted(
        activity_summary.leaderboard_data, 
        key=lambda x: x.points, 
        reverse=True
    )

    return {
        'top': [
            (
                data.user.telegram_name, 
                data.position, 
                data.points, 
                data.user.telegram_id == dialog_manager.event.from_user.id,
            )
            for data in activity_summary.leaderboard_data
        ]
    }


async def on_exit_activity_click(
    callback,
    button,
    manager: DialogManager,
):
    await manager.start(
        states.ActivityQuit.MAIN,
        data={
            'activity_summary': manager.dialog_data['activity_summary'],
        }
    )


async def on_back_to_main_click(
    callback,
    button,
    manager: DialogManager
):
    await manager.start(states.Main.MAIN)


activity_dialog = Dialog(
    Window(
        Jinja(
            "<b>{{activity_name}}</b>\n"
            "\n"
            "{{activity_description}}\n"
            "\n"
            "üóì <b>–ù–∞—á–∞–ª–æ:</b> {{activity_launched_at|datetime}}\n"
            "      <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {{activity_deadline|datetime}}\n"
            "ü§ë <b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b> {{activity_fund|money}}\n"
            "      <b>–ú–µ—Å—Ç:</b> {{activity_places}}\n"
            "\n"
            "üíº <b>–¢–≤–æ—è –Ω–∏—à–∞:</b> {{current_niche}}\n"
            "ü™ô <b>–ë–∞–ª–ª–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {{points|number}} (–≤ —Ç–æ–ø–µ: –Ω–∞ {{current_top_position|number}} –º–µ—Å—Ç–µ)\n"  # TODO: –º–± —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ current_top_position
            "\n"
            "üëâ <b>–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {{task_name}} ({{task_reward_points|plural(['–±–∞–ª–ª', '–±–∞–ª–ª–∞', '–±–∞–ª–ª–æ–≤'])}})\n"
            "üïê <b>–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:</b> {{task_deadline|datetime}}"
        ),
        Button(
            Const('‚úÖ –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ'),
            id='current_task_btn',
            on_click=on_current_task_click,
        ),
        Next(
            Const('üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            id='activity_top_btn',
        ),
        # Button(
        #     Const('‚ùå –í—ã–π—Ç–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–¥–∞—Ç—å—Å—è)'),
        #     id='activity_quit_btn',
        #     on_click=on_exit_activity_click,
        # ),
        Button(
            Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'),
            id='back_to_main_btn',
            on_click=on_back_to_main_click,
        ),
        state=states.Activity.MAIN,
        getter=(activity_getter, activity_task_getter, top_getter),
    ),
    Window(
        Jinja(
            'üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n'
            '\n'
            '{% for i in range(top|length) %}\n'
            '    {% set item = top[i] %}\n'
            '    {% if i == 0 %}\n'
            '1. <b>{% if item[3] %}üëâüèª {% endif %}ü•á {{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% elif i == 1 %}\n'
            '2. <b>{% if item[3] %}üëâüèª {% endif %}ü•à {{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% elif i == 2 %}\n'
            '3. <b>{% if item[3] %}üëâüèª {% endif %}ü•â {{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% else %}\n'
            '{{ i+1 }}. <b>{% if item[3] %}üëâüèª {% endif %}{{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% endif %}\n'
            '{% endfor %}'
            ),
        Back(Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')),
        state=states.Activity.TOP,
        getter=activity_top_getter,
    ),
    on_start=on_start_activity_dialog,
    on_process_result=on_process_result,
)
