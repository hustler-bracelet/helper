# -*- coding: utf-8 -*-
import datetime
import operator
import random
from typing import Any

from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Start, Back, Cancel, Next, ScrollingGroup, Select
from aiogram_dialog.widgets.text import Format, Const, Jinja

from hustler_bracelet.bot.dialogs import states
from hustler_bracelet.managers import FinanceManager


async def on_start_activity_dialog(start_data: dict, manager: DialogManager):
    if True:  # random.randint(0, 1):  # –ï—Å–ª–∏ –Ω–∏—à–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        await manager.start(states.ActivityOnboarding.MAIN)
        return


async def on_process_result(
        start_data: dict,
        result_data: dict,
        dialog_manager: DialogManager
):
    if result_data and result_data.get('show_task', True):
        await dialog_manager.start(states.ActivityTask.MAIN)
        return


async def top_getter(dialog_manager: DialogManager, **kwargs):
    return {
        "points": 20,
        "current_top_position": 18
    }


async def activity_task_getter(dialog_manager: DialogManager, **kwargs):
    return {
        'task_name': '–°–ª–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã',
        'task_emoji': '‚ö°Ô∏è',
        'task_caption': '–≠—Ç–æ—Ç –±—Ä–æ—É—Å–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –ª—é–±–∏—Ç –ü–∞—à—É –î—É—Ä–æ–≤–∞',
        'task_sent_at': datetime.datetime.now(),
        'task_deadline': datetime.datetime.now() + datetime.timedelta(days=10),
        'task_reward_points': 4,  # TODO: –£—Ç–æ—á–Ω–∏—Ç—å, —Ç–æ–ª—å–∫–æ –ª–∏ –±–∞–ª–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥–µ
        'people_completed_task_amount': 22 * random.randint(0, 1),
    }


async def activity_getter(dialog_manager: DialogManager, **kwargs):
    return {
        "activity_name": "üí∞ –°–µ–∑–æ–Ω –∫—Ä–∏–ø—Ç—ã",
        "activity_description": "–ù—É —á—Ç–æ, —Ö–∞—Å–ª–µ—Ä—ã, –≤—Ä–µ–º—è –ø–∞–º–ø–∏—Ç—å, –¥–∞–º–ø–∏—Ç—å, —Ö—É—è–º–ø–∏—Ç—å, –ú–ú–ú‚Äô–∏—Ç—å, –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–∫–∞–Ω—ã!\n"
                                "–í—ã–±–∏—Ä–∞–π —Å–≤–æ—é –Ω–∏—à—É –∏ –≤–ø–µ—Ä—ë–¥ –∂–∞—Ä–∏—Ç—å —Å—Ç–µ–π–∫–∏–Ω–≥–∏!",
        "activity_launched_at": datetime.datetime.now(),
        "activity_deadline": datetime.datetime.now() + datetime.timedelta(days=10),
        "activity_fund": 100_000,
        "activity_places": 20,
        "current_niche": "TON staker",
        "current_points_balance": 18,
    }


async def activity_top_getter(dialog_manager: DialogManager, **kwargs):
    return {
        'top': [
            ('–î–º–∏—Ç—Ä–∏–π', 20, 20233.27, False),
            ('Farel', 20, 16186.62, False),
            ('–ò–≥–æ—Ä—å', 18, 12949, False),
            ('ambienthugg', 18, 10359.44, True),
            ('–ñ–µ–Ω—å—á–∏–∫', 18, 8287.55, False),
            ('–†–∞–±–æ—Ç–∞–µ—Ç –ê—Ä—Ç—É—Ä', 18, 6630.04, False),
            ('Vladimir', 16, 5304.03, False),
            ('CHVS', 16, 4243.23, False),
            ('Honex', 16, 3394.58, False),
            ('Kirill Usenko', 14, 2715.66, False),
            ('Jesus', 12, 2172.53, False),
            ('–°–ø–æ–∫–∏ | 1k ROI', 10, 1738.02, False),
            ('Tony', 10, 1390.42, False),
            ('–í–ª–∞–¥', 8, 1112.34, False),
            ('–°–µ—Ä–≥–µ–π', 8, 889.87, False),
            ('Kartright', 6, 711.90, False),
            ('Jesus', 4, 569.52, False),
            ('Yankee', 4, 455.61, False),
            ('Igor', 2, 364.49, False),
            ('Un/tilt/ed', 2, 291.59, False)
        ]
    }


activity_dialog = Dialog(
    Window(
        Jinja(
            "<b>{{activity_name}}</b>\n"
            "\n"
            "{{activity_description}}\n"
            "\n"
            "üóì <b>–ù–∞—á–∞–ª–æ:</b> {{activity_launched_at|datetime}}\n"
            "      <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {{activity_deadline|datetime}}\n"
            "ü§ë <b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b> {{activity_fund|money}}\n"
            "      <b>–ú–µ—Å—Ç:</b> {{activity_places}}\n"
            "\n"
            "üíº <b>–¢–≤–æ—è –Ω–∏—à–∞:</b> {{current_niche}}\n"
            "ü™ô <b>–ë–∞–ª–ª–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {{points|number}} (–≤ —Ç–æ–ø–µ: –Ω–∞ {{current_top_position|number}} –º–µ—Å—Ç–µ)\n"  # TODO: –º–± —Å—Ç–æ–∏—Ç –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ current_top_position
            "\n"
            "üëâ <b>–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {{task_name}} ({{task_reward_points|plural(['–±–∞–ª–ª', '–±–∞–ª–ª–∞', '–±–∞–ª–ª–æ–≤'])}})\n"
            "üïê <b>–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:</b> {{task_deadline|datetime}}"
        ),
        Start(
            Const('‚úÖ –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ'),
            id='current_task_btn',
            state=states.ActivityTask.MAIN
        ),
        Next(
            Const('üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            id='activity_top_btn'
        ),
        Start(
            Const('‚ùå –í—ã–π—Ç–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–¥–∞—Ç—å—Å—è)'),
            id='activity_quit_btn',
            state=states.ActivityQuit.MAIN
        ),
        Cancel(Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')),
        state=states.Activity.MAIN,
        getter=(activity_getter, activity_task_getter, top_getter)
    ),
    Window(
        Jinja(
            'üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n'
            '\n'
            '{% for i in range(top|length) %}\n'
            '    {% set item = top[i] %}\n'
            '    {% if i == 0 %}\n'
            '1. <b>{% if item[3] %}üëâüèª {% endif %}ü•á {{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% elif i == 1 %}\n'
            '2. <b>{% if item[3] %}üëâüèª {% endif %}ü•à {{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% elif i == 2 %}\n'
            '3. <b>{% if item[3] %}üëâüèª {% endif %}ü•â {{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% else %}\n'
            '{{ i+1 }}. <b>{% if item[3] %}üëâüèª {% endif %}{{ item[0] }}</b> ‚Äî {{ item[1] }} –±–∞–ª–ª–æ–≤ ‚Äî <b>{{ item[2] }}‚ÇΩ{% if item[3] %} üëàüèª{% endif %}</b>\n'
            '    {% endif %}\n'
            '{% endfor %}'
        ),
        Back(Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')),
        state=states.Activity.TOP,
        getter=activity_top_getter,
    ),
    on_start=on_start_activity_dialog,
    on_process_result=on_process_result
)
